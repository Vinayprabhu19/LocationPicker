<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PropertyDisableMultimedia_Desc_Key" xml:space="preserve">
    <value>Let you enable button for embedded videos and images. Warning: if disable is false so you can embed images. The images are transformed to base64 and could take up a lot of space</value>
  </data>
  <data name="PropertyDisableMultimedia_Display_Key" xml:space="preserve">
    <value>Disable Multimedia Options</value>
  </data>
  <data name="PropertyMultilineField_Desc_Key" xml:space="preserve">
    <value>It let you to write rich text in a multiline fields</value>
  </data>
  <data name="PropertyMultilineField_Display_Key" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="LocationPicker_Desc" xml:space="preserve">
    <value>A control that let you to write rich text for multiline fields</value>
  </data>
  <data name="LocationPicker_Display" xml:space="preserve">
    <value>AI Text Box</value>
  </data>

  <data name="PropertyEnableVideo_Display_Key" xml:space="preserve">
    <value>Enable videos</value>
  </data> 
  <data name="PropertyEnableVideo_Desc_Key" xml:space="preserve">
    <value>Enable embed videos in the control</value>
  </data>  
  <data name="PropertyEnableImage_Display_Key" xml:space="preserve">
    <value>Enable images</value>
  </data> 
  <data name="PropertyEnableImage_Desc_Key" xml:space="preserve">
    <value>IF enable images, the component convert the selected images in format base64. Be careful with the size of the images</value>
  </data>
    <data name="PlainTextField_Display_Key" xml:space="preserve">
    <value>Target Field</value>
  </data>     
  <data name="PlainTextField_Desc_Key" xml:space="preserve">
    <value>It Allows save the same value of rich text to target field</value>
  </data>   
  <data name="ContentCopiedToClipboard" xml:space="preserve">
      <value>Content copied to clipboard!</value>
  </data>   
  <data name="GeneratedDescription" xml:space="preserve">
      <value>Generated Description</value>
  </data>   
  <data name="FieldChangeInfo" xml:space="preserve">
      <value>Some fields that are used to generate AI description have changed, please click on regenerate button to regenerate the description
    </value>
  </data>   
  <data name="RegenerateTooltip" xml:space="preserve">
      <value>Regenerate the job description. The button will become active once any changes are made to the dependent criteria.
    </value>
  </data>   
  <data name="CopyTooltip" xml:space="preserve">
      <value>Copy content to clipboard</value>
  </data>   
  <data name="AIGenContentInfo" xml:space="preserve">
      <value>AI generated content may be incorrect</value>
  </data>   
  <data name="SeeMore" xml:space="preserve">
      <value>See preview terms</value>
  </data>   
  <data name="FeedbackRecieved" xml:space="preserve">
      <value>Feedback Recieved</value>
  </data>   
</root>